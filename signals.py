from vkbottle.rule import FromMe
from vkbottle.user import Message, Blueprint
from unit import edit_msg
from prefixs import error_sticker,p,sticker
import json
import prefixs as PREFIX
from unit import __author__,__version__,__namelp__
bp = Blueprint("Signals")


@bp.on.message_handler(FromMe(),
                       text=[p+"–Ω—Ä–ø",p+"–Ω–æ–≤–æ–µ —Ä–ø"],lower=True
                       )
async def myrptext(ans:Message):
    text = f"""–ß—Ç–æ-–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –†–ü-–ö–æ–º–∞–Ω–¥—É, –ø–∏—à–∏—Ç–µ —Ç–∞–∫:
{p}+–Ω—Ä–ø (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø)
–°–º–∞–π–ª–∏–∫ –¥–µ–π—Å—Ç–≤–∏–µ

–ü—Ä–∏–º–µ—Ä:
{p}+–Ω—Ä–ø —É–¥–∞—Ä–∏—Ç—å
üëä —É–¥–∞—Ä–∏–ª(–∞)"""
    await edit_msg(ans, text)


@bp.on.message_handler(FromMe(),
                       text=[p+"+–Ω—Ä–ø <namerp>\n<sticker> <value>",p+"–Ω–æ–≤–æ–µ —Ä–ø <namerp>\n<sticker> <value>"],lower=True
                       )
async def rpadd(ans:Message, namerp:str, sticker:str, value:str):
    namejson = f"src/meroleplays/{namerp}.json"

    text = {"namerp": namerp,
            "sticker": sticker,
            "value": value}

    with open(namejson, "w", encoding="utf-8") as i:
        json.dump(dict(text), i, ensure_ascii=False)

    complete = f'{PREFIX.sticker} –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ RP-–ö–æ–º–∞–Ω–¥–∞ "{namerp}"'
    await edit_msg(ans, complete)


@bp.on.message_handler(FromMe(),text=[p+"—Ä–ø <namerp>"], lower=True)
async def RolePlay(ans:Message, namerp:str):
    try:
        namejson = f"src/meroleplays/{namerp}.json"
        with open(namejson, encoding="utf-8") as RP:
            text = json.load(RP)
        sticker, value = text["sticker"], text["value"]
        respone = await bp.api.users.get(user_ids=ans.from_id)
        respone2 = await bp.api.users.get(user_ids=ans.reply_message.from_id)
        from_user, user, from_user_id, user_id = respone[0].first_name, respone2[0].first_name, respone[0].id, respone2[0].id
        textlower = f"{sticker} | @id{from_user_id} ({from_user}) {value} @id{user_id}({user})"
        await edit_msg(ans, textlower)
    except FileNotFoundError:
        await edit_msg(ans, f"–£ –í–∞—Å –Ω–µ—Ç—É –†–ü-–ö–æ–º–∞–Ω–¥—ã {namerp}")

@bp.on.message_handler(FromMe(),text=[p+"-–Ω—Ä–ø <namerp>",p+"-—Ä–ø <namerp>"],lower=True)
async def shabdelete(ans: Message, namerp:str):
    try:
        import os
        namejson = f"src/meroleplays/{namerp}.json"
        os.remove(namejson)
        await edit_msg(ans, f'{error_sticker}–†–ü-–ö–æ–º–∞–Ω–¥–∞ "{namerp}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
    except:
        await edit_msg(ans, f"–£ –í–∞—Å –Ω–µ—Ç—É –†–ü-–ö–æ–º–∞–Ω–¥—ã {namerp}")

@bp.on.message_handler(FromMe(),text=[p+"–∏–Ω—Ñ–æ–ª–ø", p+"–ª–ø –∏–Ω—Ñ–æ"],lower=True)
async def shabdelete(ans: Message):
    y = "‚úÖ"
    n = "‚ùå"
    text = f"""
üìò {__namelp__} LP
üìï –í–µ—Ä—Å–∏—è LP: {__version__}
üìô –ê–≤—Ç–æ—Ä: {__author__}

–¢–æ–∫–µ–Ω—ã: {y}
–ü—Ä–µ—Ñ–∏–∫—Å: {PREFIX.p}
–í–∞—à ID: {ans.from_id}
"""
    return await edit_msg(ans, text)

@bp.on.message_handler(FromMe(), text=[p+"–∫–æ–Ω–≤",p+"–ø–µ—Ä–µ–≤–æ–¥"], lower=True)
async def perevod(ans: Message):
    rus = "—ë!\"‚Ññ;%:?–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"
    eng = "~!@#$%^&qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}ASDFGHJKL:\"|ZXCVBNM<>?"
    message_id = ans.reply_message.id
    dadadadada = await bp.api.messages.get_by_id(message_ids=message_id)
    message = dadadadada.items[0].text
    msg = message.translate(message.maketrans(eng, rus))
    await edit_msg(ans, msg)




